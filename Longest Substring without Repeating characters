class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int max_len =1;
        int curr_len = 1;
        int visited[256];
        for(int i=0; i< 256; i++)
        {
            visited[i] = -1;
        }
        size_t length = s.size();
        if(length == 0)
            return 0;
        visited[s[0]] = 0;
        
        for(int i=1; i<length; i++)
        {
            int prev_index = visited[s[i]];
            if(prev_index == -1 || i - curr_len > prev_index)
            {
                //either its not already visited or its not a part of the current longest substring
                curr_len+=1;
            }
            else
            {
                //need to restart the longest substring
                if(curr_len > max_len)
                {
                    max_len = curr_len;
                }
                curr_len = i-prev_index;
            }
            visited[s[i]] = i;
            
        }
        return curr_len > max_len ? curr_len:max_len;
        
        
    }
};
