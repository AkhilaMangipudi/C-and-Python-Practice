class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        //we need to find length of longest substring without repeating characters
        //maintain two pointers, left and right to the string
        //as we iterate through the string, string in between left to right-1 will not have any repeating characters. in every iteration, check if str[right] is present in substring between and left and right-left, if its present, we need to update the max_so_far variable.
        int left = 0;
        int right = 1;
        int length = s.size();
        int max_so_far = 0;
        if(length == 1)
            return 1;
        for(int i=0; i<length; i++)
        {
            string temp = s.substr(left,right-left);
            if(temp.find(s[right]) != string::npos)
            {
                //this character is present in that string
                max_so_far = max(max_so_far,right-left);
                left += temp.find(s[right])+1;
            }
            right++;
            
        }
        return max(max_so_far,right-left-1);
        
    }
};
