class Solution {
int binarySearch(vector<int>& nums, int low, int high, int target)
{
    while(low <= high)
    {
        int mid = (low + high)/2;
        if(nums[mid] == target)
        {
            return mid;
        }
        else if(nums[mid] < target)
        {
            //search in the right
            low = mid+1;
        }
        else
        {
            high = mid-1;
        }
    }
    return -1;
}

int findPivot(vector<int>& nums, int low, int high)
{
    if(high < low)
        return -1;
    if(low == high)
        return -1;
    
    int mid = (high+low)/2;
    
    if(high > mid && nums[mid] > nums[mid+1])
        return mid;
    
    if(low < mid && nums[mid] < nums[mid-1])
        return mid-1;
    
    if(nums[low] >= nums[mid])
    {
        return findPivot(nums, low, mid-1);
    }
    return findPivot(nums,mid+1,high);
}
public:
    int search(vector<int>& nums, int target) {
        //find the pivot element index
        //depending on the target, do binary search either in one subarray or the other(left and right to the pivot)
        size_t length = nums.size();
        if(length == 0)
            return -1;
        int pivot = findPivot(nums,0,length-1);
        cout<<"pivot value is"<<pivot<<endl;
        if(pivot == -1)
        {
            return binarySearch(nums,0,length-1,target);
        }
        else if(nums[pivot] == target)
        {
            return pivot;
        }
        else if(nums[0] > target)
        {
            return binarySearch(nums,pivot+1,length-1,target);
        }
        else if(nums[0] <= target)
        {
            return binarySearch(nums,0,pivot,target);
        }
    }
};
