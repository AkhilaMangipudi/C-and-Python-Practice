class Solution {
public:
    string longestPalindrome(string s) {
        //Brute force method: Find all possible substrings of the given string and check whether or not each of it is a palindrome. Finding all possible substrings is two loops, O(n2); checking is O(n), so overall time complexity is O(n3)
        //DP: We can store the results of subproblems and make it O(n2) time and space
        //Method 3: The one below:, O(n2) time and O(1) space. Consider every element in the string as the center of both even and odd length palindromic strings and find the max length palindromic string that you can form with this element as the centre. Repeat this for all the elements and find the maxlength
        //method 4: Using Manachers Algorithm in linear time, try it as well
        int low = 0;
        int high = 0;
        int maxLen = 1;
        int start = 0;
        int length = s.size();
        for(int i=0; i<length; i++)
        {
            //even length palindromes 
            //we need to start from i-1 and i
            low = i-1;
            high = i;
            while(low >=0 && high < length && s[low] == s[high])
            {
                if(maxLen < high-low+1)
                {
                    maxLen = high-low+1;
                    start = low; //it starts from that point and will be of length maxLen
                }
                low--;
                high++;
            }
            
            
            //now for odd length palindromes
            //this element will be center
            low = i-1;
            high = i+1;
            while(low >=0 && high < length && s[low] == s[high])
            {
                if(maxLen < high-low+1)
                {
                    maxLen = high-low+1;
                    start = low; //it starts from that point and will be of length maxLen
                }
                low--;
                high++;
            }
            
        }
        return s.substr(start,maxLen);
        
        
    }
};
